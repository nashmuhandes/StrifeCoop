// Copyright 2021 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// StrifeCoopPlayerPlugin
//
//===========================================================================

class StrifeCoopPlayerPlugin : Inventory
{
	StrifeCoopCampaign campaign;

	String oldLogText;
	String newLogText;

	int oldStamina, newStamina;
	int oldAccuracy, newAccuracy;
	bool upgradedStamina, upgradedAccuracy;

	// this player joined as a new player after the save game was created
	// (for example, player 3 joining on a save game that was saved with 2 players)
	bool isNewJoiningPlayer;

	bool exitedLevel;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		Inventory.MaxAmount 1;
		+Inventory.UNDROPPABLE
		+Inventory.UNTOSSABLE
		+Inventory.AUTOACTIVATE
		-Inventory.INVBAR
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override bool TryPickup(in out Actor toucher)
	{
		if (!(toucher is "PlayerPawn") || (toucher is "PlayerPawn" && !toucher.player))
		{
			GoAwayAndDie();
			return false;
		}

		if (!campaign) campaign = StrifeCoopCampaign.GetInstance();

		return Super.TryPickup(toucher);
	}

	override void DoEffect(void)
	{
		if (!Owner) return;
		if (Owner && !(Owner is "PlayerPawn")) return;

		// must have a valid campaign reference
		if (!campaign)
		{
			ThrowAbortException(String.Format("StrifeCoopPlayerPlugin for player %d can't find campaign object", Owner.PlayerNumber() + 1));
			return;
		}

		HandleNewPlayer();
		HandleSigil();
		UpdateLogText();
		UpdateStats();
		CheckForTalkableNPCs();
		HandleProgrammerDeathFade();

		Super.DoEffect();
	}

	override void Tick(void)
	{
		UpdateDisguise();
		Super.Tick();
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	clearscope static StrifeCoopPlayerPlugin Find(Actor a)
	{
		StrifeCoopPlayerPlugin plugin = StrifeCoopPlayerPlugin(a.FindInventory("StrifeCoopPlayerPlugin", true));
		return plugin;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void HandleNewPlayer(void)
	{
		let pmo = PlayerPawn(Owner);
		if (pmo)
		{
			// handle just-joined players
			if (isNewJoiningPlayer)
			{
				//Console.Printf("Player %d is a noob", pmo.PlayerNumber() + 1);

				// set the stats to the saved data on the campaign
				pmo.Stamina = campaign.maxStamina;
				pmo.Accuracy = campaign.maxAccuracy;
				oldStamina = newStamina = campaign.maxStamina; pmo.GiveBody(-100);
				oldAccuracy = newAccuracy = campaign.maxAccuracy;

				// sychronize quest log
				oldLogText = newLogText = campaign.latestLogText;
				String txt = campaign.latestLogText;
				int num = txt.Mid("\$TXT_ILOG".Length()).ToInt();
				pmo.player.SetLogNumber(num);

				// rescale enemies
				if (strifecoop_scaleenemies)
				{
					let eh = StrifeCoopHandler(StrifeCoopHandler.Find("StrifeCoopHandler"));
					if (eh && eh.campaign)
					{
						eh.campaign.DoScaleEnemies();
					}
				}

				isNewJoiningPlayer = false;
			}
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void UpdateLogText(void)
	{
		PlayerPawn pmo = PlayerPawn(Owner);

		if (pmo)
		{
			// Don't run this at the start of the campaign
			if (Level.totaltime == 0)
			{
				oldLogText = newLogText = pmo.player.LogText;
				campaign.latestLogText = newLogText;
				return;
			}

			// Monitor the player's quest log. If the text changes, update it for all players.
			// Can't think of a better way to do this LOL...
			newLogText =  pmo.player.LogText;
			if (oldLogText != newLogText)
			{
				for (int i = 0; i < MAXPLAYERS; i++)
				{
					if (playeringame[i])
					{
						PlayerPawn playerToUpdate = players[i].mo;

						if (playerToUpdate)
						{
							// get the log number
							String txt = newLogText;
							int num = txt.Mid("\$TXT_ILOG".Length()).ToInt();

							campaign.latestLogNum = num;

							// skip self
							if (playerToUpdate == pmo)
							{
								if (playerToUpdate == players[consoleplayer].mo)
								{
									Console.MidPrint(NULL, "$TXT_LOGUPDATED");
								}

								continue;
							}

							if (playerToUpdate == players[consoleplayer].mo)
							{
								playerToUpdate.player.SetLogNumber(num);

								// hack needed to make subtitles show up when you kill AlienSpectre5, or the scanning crew (blue Acolytes)...
								if (num == 83 || num == 85 || num == 14)
								{
									String voc = "svox/voc" .. num;
									playerToUpdate.player.SetSubtitleNumber(num, voc);
								}
							}
						}
					}
				}

				// update log text on the campaign object
				campaign.latestLogText = newLogText;

				oldLogText = newLogText;
			}
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void UpdateStats(void)
	{
		PlayerPawn pmo = PlayerPawn(Owner);

		if (pmo)
		{
			// the game just started, no point in continuing the check
			if (Level.totaltime == 0)
			{
				oldStamina = newStamina = pmo.Stamina;
				oldAccuracy = newAccuracy = pmo.Accuracy;
				return;
			}

			// print message for other players to see
			if (pmo == players[consoleplayer].mo && (upgradedStamina || upgradedAccuracy))
			{
				String txt = "";
				if		(upgradedStamina && !upgradedAccuracy)	txt = "$TXT_UPGRADEDSTAMINA";
				else if	(upgradedAccuracy && !upgradedStamina)	txt = "$TXT_UPGRADEDACCURACY";
				else if	(upgradedStamina && upgradedAccuracy)	txt = "$TXT_UPGRADEDBOTH";
				Console.MidPrint(NULL, txt);
			}

			upgradedStamina = false;
			upgradedAccuracy = false;

			// this player detected a stamina change
			newStamina = pmo.Stamina;
			if (oldStamina != newStamina)
			{
				// update stamina for all players except this one
				for (int i = 0; i < MAXPLAYERS; i++)
				{
					if (playeringame[i])
					{
						PlayerPawn playerToUpdate = players[i].mo;

						if (playerToUpdate)
						{
							// skip this player
							if (playerToUpdate == pmo) continue;

							// update stamina on the other player
							// make sure to update all the variables properly so that
							// those players won't trigger an extra update
							let playerToUpdatePlugin = StrifeCoopPlayerPlugin.Find(playerToUpdate);
							if (playerToUpdatePlugin)
							{
								playerToUpdate.Stamina = newStamina;
								playerToUpdate.GiveBody(-100);
								playerToUpdatePlugin.oldStamina = playerToUpdatePlugin.newStamina = newStamina;
								playerToUpdatePlugin.upgradedStamina = true;
							}
						}
					}
				}
				oldStamina = newStamina;
				upgradedStamina = true;
			}

			// this player detected an accuracy change
			newAccuracy = pmo.Accuracy;
			if (oldAccuracy != newAccuracy)
			{
				// update accuracy for all players except this one
				for (int i = 0; i < MAXPLAYERS; i++)
				{
					if (playeringame[i])
					{
						PlayerPawn playerToUpdate = players[i].mo;
						if (playerToUpdate)
						{
							// skip this player
							if (playerToUpdate == pmo) continue;

							// update accuracy on the other player
							// make sure to update all the variables properly so that
							// those players won't trigger an extra update
							let playerToUpdatePlugin = StrifeCoopPlayerPlugin.Find(playerToUpdate);
							if (playerToUpdatePlugin)
							{
								playerToUpdate.Accuracy = newAccuracy;
								playerToUpdatePlugin.oldAccuracy = playerToUpdatePlugin.newAccuracy = newAccuracy;
								playerToUpdatePlugin.upgradedAccuracy = true;
							}
						}
					}
				}
				oldAccuracy = newAccuracy;
				upgradedAccuracy = true;
			}

			// update the globally tracked stats
			campaign.maxStamina = newStamina;
			campaign.maxAccuracy = newAccuracy;
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void UpdateDisguise(void)
	{
		if (!multiplayer) return;
		if (deathmatch) return;
		if (!strifecoop_disguise) return;
		if (!Owner) return;
		if (Owner && !(Owner is "PlayerPawn")) return;
		let pmo = PlayerPawn(Owner);
		if (pmo && pmo.Health > 0)
		{
			let uniform = pmo.FindInventory("OfficersUniform", true);
			if (uniform)
			{
				pmo.sprite = GetSpriteIndex('AGRD');
			}
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void CheckForTalkableNPCs(void)
	{
		bool pressedUse = ((Owner.GetPlayerInput(MODINPUT_BUTTONS) & BT_USE && !(Owner.GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_USE)));
		if (pressedUse)
		{
			static const double angleofs[] = { 0, 90.0 / 16, -90.0 / 16 };
			FTranslatedLineTarget t;

			for (int i = 0; i < angleofs.Size (); i++)
			{
				double ang = angleofs[i];

				Owner.AimLineAttack(Owner.Angle + ang, 128.0, t, 35.0, ALF_FORCENOSMART | ALF_CHECKCONVERSATION | ALF_PORTALRESTRICT);

				if (t.linetarget != NULL)
				{
					if (t.linetarget.health > 0 && // Dead things can't talk.
						!(t.linetarget.bInCombat) && // Fighting things don't talk either.
						//t.linetarget.Conversation != NULL)
						t.linetarget.bInConversation &&
						!Owner.player.ConversationNPC && !Owner.player.ConversationPC)
					{
						if (Owner == players[consoleplayer].mo)
						{
							String txt = StringTable.Localize("$TXT_NPCBUSY");
							Owner.A_Log(txt);
						}
						break;
					}
					break;
				}
			}
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void ClearConversationStuff(PlayerInfo plr)
	{
		let npc = plr.ConversationNPC;
		if (npc)
		{
			if (npc.bInConversation)
			{
				npc.bInConversation = false;
			}

			// restore NPC angle
			if (!npc.bDontFaceTalker)
			{
				npc.Angle = plr.ConversationNPCAngle;
			}
		}

		plr.ConversationFaceTalker = false;
		plr.ConversationNPC = NULL;
		plr.ConversationPC = NULL;
		plr.ConversationNPCAngle = 0.;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void HandleSigil(void)
	{
		PlayerPawn pmo = PlayerPawn(Owner);

		if (pmo)
		{
			let sig = pmo.FindInventory("Sigil", false);
			if (sig)
			{
				// Make the Sigil undroppable because being allowed to do this will break the game
				// (for example, being able to go back to the non-abandoned Front Base map AFTER
				// The Programmer has been defeated)
				sig.bUndroppable = true;
			}
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void HandleProgrammerDeathFade(void)
	{
		if (Level.levelnum != 9 && Level.levelnum != 10) return;
		if (!Owner) return;

		let a = Owner.FindInventory("ProgLevelEnder", false);
		if (a)
		{
			PlayerPawn me = PlayerPawn(Owner);
			if (me)
			{
				//Console.Printf("Player %d killed The Programmer", me.PlayerNumber() + 1);
				for (int i = 0; i < MAXPLAYERS; i++)
				{
					if (playeringame[i])
					{
						let otherPlayer = PlayerPawn(players[i].mo);
						if (otherPlayer && otherPlayer == me)
						{
							continue;
						}
						//Console.Printf("Giving StrifeCoopProgLevelEnder to player %d", otherPlayer.PlayerNumber() + 1);
						otherPlayer.A_GiveInventory("StrifeCoopProgLevelEnder", 1);
					}
				}
			}
		}
	}
}
