// Copyright 2021 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// StrifeCoopPlayerPlugin
//
//===========================================================================

class StrifeCoopPlayerPlugin : Inventory
{

	String oldLogText;
	String newLogText;

	int oldStamina, newStamina;
	int oldAccuracy, newAccuracy;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		Inventory.MaxAmount 1;
		+Inventory.UNDROPPABLE
		+Inventory.UNTOSSABLE
		+Inventory.AUTOACTIVATE
		-Inventory.INVBAR
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void DoEffect(void)
	{
		if (!Owner) return;
		if (Owner && !(Owner is "PlayerPawn")) return;

		UpdateLogText();
		UpdateStats();
		CheckForTalkableNPCs();

		Super.DoEffect();
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void UpdateLogText(void)
	{
		PlayerPawn pmo = PlayerPawn(Owner);

		if (pmo)
		{
			// Don't run this at the start of the level
			if (level.maptime == 0)
			{
				oldLogText = newLogText = pmo.player.LogText;
				return;
			}

			// Monitor the player's quest log. If the text changes, update it for all players.
			// Can't think of a better way to do this LOL...
			newLogText =  pmo.player.LogText;
			if (oldLogText != newLogText)
			{
				for (int i = 0; i < MAXPLAYERS; i++)
				{
					if (playeringame[i])
					{
						PlayerPawn currentPlayer = players[i].mo;

						// skip self
						if (currentPlayer == pmo)
						{
							if (currentPlayer == players[consoleplayer].mo)
							{
								Console.MidPrint(NULL, "$TXT_LOGUPDATED");
							}
							continue;
						}

						// get the log number
						String txt = newLogText;
						int num = txt.Mid("\$TXT_ILOG".Length()).ToInt();

						if (currentPlayer == players[consoleplayer].mo)
						{
							currentPlayer.player.SetLogNumber(num);

							// hack needed to make subtitles show up when you kill AlienSpectre5...
							if (num == 83 || num == 85)
							{
								String voc = "svox/voc" .. num;
								currentPlayer.player.SetSubtitleNumber(num, voc);
							}
						}
					}
				}

				oldLogText = newLogText;
			}
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void UpdateStats(void)
	{
		PlayerPawn pmo = PlayerPawn(Owner);

		if (pmo)
		{
			if (level.maptime == 0)
			{
				oldStamina = newStamina = pmo.Stamina;
				oldAccuracy = newAccuracy = pmo.Accuracy;
				return;
			}

			bool upgradedStamina = false;
			bool upgradedAccuracy = false;

			newStamina =  pmo.Stamina;
			if (oldStamina != newStamina)
			{
				for (int i = 0; i < MAXPLAYERS; i++)
				{
					if (playeringame[i])
					{
						PlayerPawn currentPlayer = players[i].mo;
						if (currentPlayer == pmo) continue;
						currentPlayer.Stamina = newStamina;
						currentPlayer.GiveBody(-100);
					}
				}
				oldStamina = newStamina;
				upgradedStamina = true;
			}

			newAccuracy =  pmo.Accuracy;
			if (oldAccuracy != newAccuracy)
			{
				for (int i = 0; i < MAXPLAYERS; i++)
				{
					if (playeringame[i])
					{
						PlayerPawn currentPlayer = players[i].mo;
						if (currentPlayer == pmo) continue;
						currentPlayer.Accuracy = newAccuracy;
					}
				}
				oldAccuracy = newAccuracy;
				upgradedAccuracy = true;
			}

			if (pmo == players[consoleplayer].mo && (upgradedStamina || upgradedAccuracy))
			{
				String txt = "";
				if (upgradedStamina && !upgradedAccuracy) txt = "$TXT_UPGRADEDSTAMINA";
				else if (upgradedAccuracy && !upgradedStamina) txt = "$TXT_UPGRADEDACCURACY";
				else if (upgradedStamina && upgradedAccuracy) txt = "$TXT_UPGRADEDBOTH";
				Console.MidPrint(NULL, txt);
			}
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void CheckForTalkableNPCs(void)
	{
		bool pressedUse = ((Owner.GetPlayerInput(MODINPUT_BUTTONS) & BT_USE && !(Owner.GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_USE)));
		if (pressedUse)
		{
			static const double angleofs[] = { 0, 90.0 / 16, -90.0 / 16 };
			FTranslatedLineTarget t;

			for (int i = 0; i < angleofs.Size (); i++)
			{
				double ang = angleofs[i];

				Owner.AimLineAttack(Owner.Angle + ang, 128.0, t, 35.0, ALF_FORCENOSMART | ALF_CHECKCONVERSATION | ALF_PORTALRESTRICT);

				if (t.linetarget != NULL)
				{
					if (t.linetarget.health > 0 && // Dead things can't talk.
						!(t.linetarget.bInCombat) && // Fighting things don't talk either.
						//t.linetarget.Conversation != NULL)
						t.linetarget.bInConversation &&
						!Owner.player.ConversationNPC && !Owner.player.ConversationPC)
					{
						if (Owner == players[consoleplayer].mo)
						{
							String txt = StringTable.Localize("$TXT_NPCBUSY");
							Owner.A_Log(txt);
						}
						break;
					}
					break;
				}
			}
		}
	}
}
