// Copyright 2021 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// StrifeCoopLevelPostProcessor
//
//===========================================================================

class StrifeCoopLevelPostProcessor : LevelPostProcessor
{
	protected void Apply(Name checksum, String mapname)
	{
		bool isCoop = (multiplayer && !deathmatch);
		if (!isCoop) return;
		RemoveUnwantedThings(checksum, mapname);
		FixExitLines(checksum, mapname);
		FixStrifeMaps(checksum, mapname);
		FixSVEMaps(checksum, mapname);
	}

	//===========================================================================
	//
	// Removed Unwanted Things
	//
	//===========================================================================

	void RemoveUnwantedThings(Name checksum, String mapname)
	{
		for (int t = 0; t < GetThingCount(); t++)
		{
			int ednum = GetThingEdNum(t);


			// remove horribly unbalanced items meant for deathmatch
			int thingFlags = GetThingFlags(t);
			if (thingFlags & MTF_SINGLE)
			{
				SetThingFlags(t, thingFlags | (MTF_SINGLE | MTF_DEATHMATCH | MTF_COOPERATIVE));
			}
			else
			{
				SetThingFlags(t, thingFlags & ~(MTF_SINGLE | MTF_DEATHMATCH | MTF_COOPERATIVE));
			}

			bool isUnwantedThing =
			(
				// exit barrier
				ednum == 69 ||

				// deathmatch starts
				ednum == 11
			);

			// get rid of unwanted things
			if (isUnwantedThing)
			{
				SetThingEdNum(t, 0);
			}
		}
	}

	//===========================================================================
	//
	// Fix Exit Lines
	//
	//===========================================================================

	void FixExitLines(Name checksum, String mapname)
	{
		for (int i = 0; i < Level.Lines.Size(); i++)
		{
			Line ln = Level.Lines[i];

			// Change the walk-over exit lines to block the player, so that the party gathering function can run properly
			if ((ln.activation & SPAC_Cross) && ln.special == ACS_ExecuteAlways && (ln.args[2] == 145 || ln.args[2] == 186))
			{
				if (ln.args[2] == 145)
				{
					ln.flags |= Line.ML_BLOCK_PLAYERS;
					ln.activation |= (SPAC_Push | SPAC_UseBack);
					ln.activation &= ~SPAC_Cross;
				}
			}
		}
	}
}
