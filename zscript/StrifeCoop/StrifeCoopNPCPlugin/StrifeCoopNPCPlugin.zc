// Copyright 2021 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// StrifeCoopNPCPlugin
//
//===========================================================================

class StrifeCoopNPCPlugin : Inventory
{
	uint8 talkingWasInterrupted;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		Inventory.MaxAmount 1;
		+Inventory.UNDROPPABLE
		+Inventory.UNTOSSABLE
		+Inventory.AUTOACTIVATE
		-Inventory.INVBAR
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void DoEffect(void)
	{
		if (Owner && Owner.player)
		{
			return;
		}

		if (multiplayer)
		{
			if (Owner.Health > 0 && Owner.target && Owner.target is "PlayerPawn" && Owner.bInCombat && !Owner.bFriendly)
			{
				State meleeState = Owner.ResolveState('Melee');
				State missileState = Owner.ResolveState('Missile');
				bool isInMeleeState = Owner.InStateSequence(Owner.curState, meleeState);
				bool isMissileState = Owner.InStateSequence(Owner.curState, missileState);
				if (!isInMeleeState && !isMissileState)
				{
					CheckForOtherPlayers();
				}
			}
		}

		if (talkingWasInterrupted > 0)
		{
			talkingWasInterrupted--;
		}

		Super.DoEffect();
	}

	override void AbsorbDamage(int damage, Name damageType, out int newdamage, Actor inflictor, Actor source, int flags)
	{
		Super.AbsorbDamage(damage, damageType, newdamage, inflictor, source, flags);

		if (!multiplayer) return;

		if (newdamage > 0)
		{
			// Check if NPC was attacked, so that conversations can be cancelled immediately
			if (Owner.bInConversation)
			{
				//Console.Printf("%s was attacked while in conversation!", Owner.GetTag());
				Owner.bInConversation = false;
				Owner.A_StopSound(CHAN_VOICE);
				talkingWasInterrupted = 2;
			}
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void CheckForOtherPlayers(void)
	{
		PlayerPawn targ = PlayerPawn(Owner.target);
		if (!targ) return;

		PlayerPawn newTarg = NULL;

		let me = Owner;

		// randomly target a new player every 2 seconds
		if (level.time % (Thinker.TICRATE * 2) == 0)
		{
			int totalPlayers = 0;
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (playeringame[i]) totalPlayers++;
			}

			// random player has been picked
			int p = random(0, totalPlayers - 1);

			newTarg = players[p].mo;

			if (!newTarg || !targ) return;

			// randomly chosen player was the same as before, so abort
			if (newTarg == targ) return;

			// check if newly chosen player is within distance and visibility
			if (me.Distance3D(newTarg) < 1000.0 && me.CheckSight(newTarg, SF_SEEPASTBLOCKEVERYTHING | SF_SEEPASTSHOOTABLELINES))
			{
				me.target =
				me.lastheard =
				me.lastenemy = newTarg;
			}
		}

		//Console.Printf("%s is currently targetting Player %d", Owner.GetTag(), targ.PlayerNumber() + 1);
	}
}
