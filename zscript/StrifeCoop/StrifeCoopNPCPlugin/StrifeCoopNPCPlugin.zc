// Copyright 2021 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// StrifeCoopNPCPlugin
//
//===========================================================================

class StrifeCoopNPCPlugin : Inventory
{
	uint8 talkingWasInterrupted;
	StrifeCoopTalkIcon talkIcon;
	bool oldUberEntity, newUberEntity;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		Inventory.MaxAmount 1;
		+Inventory.UNDROPPABLE
		+Inventory.UNTOSSABLE
		+Inventory.AUTOACTIVATE
		-Inventory.INVBAR
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void DoEffect(void)
	{
		if (Owner && Owner.player)
		{
			return;
		}

		if (multiplayer)
		{
			if (Owner.Health > 0 && Owner.Target && Owner.Target is "PlayerPawn" && Owner.bInCombat && !Owner.bFriendly && !StrifeCoopHandler.IsMerchant(Owner))
			{
				State meleeState = Owner.ResolveState('Melee');
				State missileState = Owner.ResolveState('Missile');
				bool isInMeleeState = Owner.InStateSequence(Owner.curState, meleeState);
				bool isMissileState = Owner.InStateSequence(Owner.curState, missileState);
				if (!isInMeleeState && !isMissileState)
				{
					RandomlyTargetOtherPlayers();
				}
			}

			if (Owner.bInConversation)
			{
				if (!talkIcon)
				{
					talkIcon = StrifeCoopTalkIcon(Owner.Spawn("StrifeCoopTalkIcon", Owner.Pos + (0, 0, Owner.Height), NO_REPLACE));
					if (talkIcon)
					{
						// assign the chat bubble to this NPC
						talkIcon.npc = Owner;

						// find the player this NPC is talking to
						for (int i = 0; i < MAXPLAYERS; i++)
						{
							if (playeringame[i] && players[i].mo)
							{
								let pmo = players[i].mo;
								if (pmo.player.ConversationPC && pmo.player.ConversationNPC && pmo.player.ConversationNPC == Owner)
								{
									talkIcon.pmoTalkedTo = pmo;
								}
							}
						}
					}
				}
			}
			else
			{
				if (talkIcon)
				{
					talkIcon.Destroy();
				}
			}
		}

		if (talkingWasInterrupted > 0)
		{
			talkingWasInterrupted--;
		}

		// Hack to make Uber Entity faster
		if (Owner is "EntityBoss" && Owner.Target && Owner.Health > 0 )
		{
			CheckUberEntitySettings();

			if (strifecoop_uberentity)
			{
				// Fortunately most of the Entity's states last for 4 tics...
				Owner.tics = tics / 2;
			}
		}

		Super.DoEffect();
	}

	override void AbsorbDamage(int damage, Name damageType, out int newdamage, Actor inflictor, Actor source, int flags)
	{
		Super.AbsorbDamage(damage, damageType, newdamage, inflictor, source, flags);

		if (!multiplayer)
			return;

		if (newdamage > 0)
		{
			// Check if NPC was attacked, so that conversations can be cancelled immediately
			if (Owner.bInConversation)
			{
				//Console.Printf("%s was attacked while in conversation!", Owner.GetTag());
				Owner.bInConversation = false;
				Owner.A_StopSound(CHAN_VOICE);
				talkingWasInterrupted = 2;
			}
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	clearscope static StrifeCoopNPCPlugin Find(Actor a)
	{
		StrifeCoopNPCPlugin plugin = StrifeCoopNPCPlugin(a.FindInventory("StrifeCoopNPCPlugin", true));
		return plugin;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void CheckUberEntitySettings(void)
	{
		if (!(Owner is "EntityBoss"))
			return;

		newUberEntity = strifecoop_uberentity;
		if (oldUberEntity != newUberEntity)
		{
			// Reset the Entity's health to default, before scaling it
			// (this is intentional; to prevent abuse from repeatedly toggling the value mid-play)
			Owner.StartHealth = Owner.Default.GetMaxHealth(true);
			Owner.A_SetHealth(Owner.GetMaxHealth(true));
			ScaleStats();
			oldUberEntity = newUberEntity;
		}
	}

	void ResetStats(void)
	{
		if (!Owner)
			return;
		let me = Owner;

		if (StrifeCoopHandler.IsMerchant(me))
			return;

		if (me.Health <= 0)
			return;

		int osh = me.GetMaxHealth(true);
		double nsh = double(osh);

		// keep track of original health percentage
		double originalHealthPercent = ceil(100. * double(me.Health) / double(me.GetMaxHealth(true)));

		me.StartHealth = me.Default.GetMaxHealth(true);

		// now set the health percentage back to what it originally was
		double newHealth = ceil(double(me.GetMaxHealth(true)) * originalHealthPercent / 100.);
		me.A_SetHealth(int(newHealth));
	}

	void ScaleStats(void)
	{
		if (!Owner)
			return;

		let me = Owner;

		if (StrifeCoopHandler.IsMerchant(me))
			return;

		if (me.Health <= 0)
			return;

		int pcount = StrifeCoopHandler.GetPlayerCount();

		//===========================================================================
		//
		// Scale max health
		//
		//===========================================================================
		int osh = me.GetMaxHealth(true);
		double nsh = double(osh);

		// keep track of original health percentage scaling
		double originalHealthPercent = ceil(100. * double(me.Health) / double(me.GetMaxHealth(true)));

		//Console.Printf("%s's health is at %d%% before scaling", me.GetTag(), originalHealthPercent);

		for (int i = 0; i < pcount; i++)
		{
			// no additional health on the 0th player
			if (i > 0)
			{
				// 25% additional health for every player from player 2 and beyond
				nsh *= 1.25;
			}
		}

		// Uber Entity!!!!
		if (Owner is "EntityBoss")
		{
			if (strifecoop_uberentity)
			{
				nsh *= 20.;
				Owner.PainChance = 0;
				Owner.bNoPain = true;
				Owner.bAlwaysFast = true; // doesn't really work because none of the Entity's state definitions have the Fast qualifier...
			}
			else
			{
				Owner.PainChance = Owner.Default.PainChance;
				Owner.bNoPain = Owner.Default.bNoPain;
				Owner.bAlwaysFast = Owner.Default.bAlwaysFast;
			}
		}

		// you can't write to SpawnHealth, but apparently StartHealth does it
		me.StartHealth = strifecoop_scaleenemies ? int(floor(nsh)) : me.Default.GetMaxHealth(true);

		// now set the health percentage back to what it originally was
		double newHealth = ceil(double(me.GetMaxHealth(true)) * originalHealthPercent / 100.);
		//Console.Printf("%s's new health is %d after scaling", me.GetTag(), newHealth);
		me.A_SetHealth(int(newHealth));
	}

	void RandomlyTargetOtherPlayers(void)
	{
		PlayerPawn targ = PlayerPawn(Owner.Target);
		if (!targ)
			return;

		PlayerPawn newTarg = NULL;

		let me = Owner;

		// randomly target a new player every 2 seconds
		if (Level.time % (Thinker.TICRATE * 2) == 0)
		{
			int totalPlayers = 0;
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (playeringame[i]) totalPlayers++;
			}

			// random player has been picked
			int p = random[rnd_TargetRandomPlayer](0, totalPlayers - 1);

			newTarg = players[p].mo;

			if (!newTarg || !targ)
				return;

			// randomly chosen player was the same as before, so abort
			if (newTarg == targ)
				return;

			// check if newly chosen player is within distance and visibility
			if (me.Distance3D(newTarg) < 1000.0 && me.CheckSight(newTarg, SF_SEEPASTBLOCKEVERYTHING | SF_SEEPASTSHOOTABLELINES))
			{
				me.Target =
				me.LastHeard =
				me.LastEnemy = newTarg;
			}
		}

		//Console.Printf("%s is currently Targetting Player %d", Owner.GetTag(), targ.PlayerNumber() + 1);
	}
}
