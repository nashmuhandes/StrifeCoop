// Copyright 2021 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// StrifeCoopLoadSaveHandler
//
//===========================================================================

class StrifeCoopLoadSaveHandler : StaticEventHandler
{
	override void WorldLoaded(WorldEvent e)
	{
		if (e.IsSaveGame)
		{
			let eh = StrifeCoopHandler(StrifeCoopHandler.Find("StrifeCoopHandler"));
			if (eh)
			{
				let campaign = eh.campaign;

				// abort if campaign reference is null
				if (!campaign)
				{
					ThrowAbortException("StrifeCoopLoadSaveHandler trying to load a saved game with no campaign object");
					return;
				}

				// abort if it isn't a valid StrifeCoop game
				if (!campaign.isCoopGame)
				{
					// lol why was this line localized?!
					ThrowAbortException(StringTable.Localize("$TXT_LOADEDGAMEISNOTCOOP"));
				}

				// all good, continue to load the game
				eh.CacheCVars();
				HandlePlayersOnLoadedGame(eh);
			}
		}
	}

	void HandlePlayersOnLoadedGame(StrifeCoopHandler eh)
	{
		// TO DO: this can probably be done in a more robust way...
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (playeringame[i])
			{
				let pmo = players[i].mo;
				if (pmo)
				{
					//Console.Printf("Handling a loaded save game for player %d", pmo.PlayerNumber() + 1);

					// the game was saved while in conversation, so it's time to clear it
					if (pmo.player.ConversationNPC)
					{
						let plugin = StrifeCoopPlayerPlugin.Find(pmo);
						if (plugin)
						{
							if (gameaction != ga_slideshow)
							{
								plugin.ClearConversationStuff(pmo.player);
							}
						}
					}

					// the player doesn't have a plugin, so we can assume it's a newly-added player
					let plugin = StrifeCoopPlayerPlugin.Find(pmo);
					if (!plugin)
					{
						eh.SetupPlayer(pmo);
						plugin = StrifeCoopPlayerPlugin.Find(pmo);
						plugin.isNewJoiningPlayer = true;
					}
					else
					{
						if (eh.campaign && plugin)
						{
							// check if data is dirty somehow and clean them up

							// stats aren't synched?
							if (pmo.Stamina != eh.campaign.maxStamina)
							{
								pmo.Stamina = eh.campaign.maxStamina;
								plugin.oldStamina = plugin.newStamina = eh.campaign.maxStamina;
								pmo.GiveBody(-100);
							}
							if (pmo.Accuracy != eh.campaign.maxAccuracy)
							{
								pmo.Accuracy = eh.campaign.maxAccuracy;
								plugin.oldAccuracy = plugin.newAccuracy = eh.campaign.maxAccuracy;
							}

							// log text isn't synched?
							String latestTxt = eh.campaign.latestLogText;
							String playerTxt = pmo.player.LogText;
							if (pmo.player.LogText.Length() == 0)
							{
								playerTxt = pmo.player.LogText = "$TXT_FINDHELP";
							}
							if (!(playerTxt ~== latestTxt))
							{
								plugin.oldLogText = plugin.newLogText = eh.campaign.latestLogText;
								int num = latestTxt.Mid("\$TXT_ILOG".Length()).ToInt();
								pmo.player.SetLogNumber(num);
							}
						}
					}
				}
			}
		}
	}
}
