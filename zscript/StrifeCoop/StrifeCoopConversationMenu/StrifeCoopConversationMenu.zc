// Copyright 2021 - 2024 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// StrifeCoopConversationMenu
//
//===========================================================================

class StrifeCoopConversationMenu : ConversationMenu
{
	PlayerInfo plr;
	PlayerPawn pmo;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override int Init(StrifeDialogueNode CurNode, PlayerInfo player, int activereply)
	{
		// set player pointers
		if (player)
		{
			if (!plr)
			{
				plr = player;
			}

			if (!pmo && plr.mo)
			{
				pmo = plr.mo;
			}
		}

		return Super.Init(CurNode, player, activereply);
	}

	override void Ticker(void)
	{
		Super.Ticker();

		if (plr.ConversationNPC && plr.ConversationPC)
		{
			bool forceCloseConversation = false;

			// if the person you're talking to was attacked, end the conversation immediately
			Actor npc = plr.ConversationNPC;
			let plugin = StrifeCoopNPCPlugin.Find(npc);
			if (plugin)
			{
				if (plugin.talkingWasInterrupted > 0)
				{
					forceCloseConversation = true;
				}
			}

			// close the conversation if someone triggered a level exit
			let pplugin = StrifeCoopPlayerPlugin.Find(pmo);
			if (pplugin)
			{
				if (pplugin.exitedLevel)
				{
					forceCloseConversation = true;
				}
			}

			if (forceCloseConversation)
			{
				// clear conversation pointers
				StrifeCoopHandler.SendNetworkEvent("EV_ClearConversationStuff");

				// use the "back" event instead of closing the menu directly
				MenuEvent(MKEY_Back, false);
			}
		}
	}

	override void Drawer(void)
	{
		Super.Drawer();

		// draw debug text
		if (!plr)
			return;
		let eh = StrifeCoopHandler(StrifeCoopHandler.Find("StrifeCoopHandler"));
		if (!eh)
			return;
		int debugMode = eh.cvDebug.GetInt();
		if (debugMode <= 0)
			return;
		StrifeCoopDebugText.DrawDebugText(plr, debugMode);
	}
}
