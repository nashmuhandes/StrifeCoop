// Copyright 2021 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// StrifeCoopLogTextTracker
//
//===========================================================================

class StrifeCoopLogTextTracker : Inventory
{
	String oldLogText;
	String newLogText;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		Inventory.MaxAmount 1;
		+Inventory.UNDROPPABLE
		+Inventory.UNTOSSABLE
		+Inventory.AUTOACTIVATE
		-Inventory.INVBAR
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void DoEffect(void)
	{
		if (Owner && Owner.player)
		{
			PlayerPawn pmo = PlayerPawn(Owner);

			if (pmo)
			{
				// Don't run this at the start of the level
				if (level.maptime == 0)
				{
					oldLogText = newLogText = pmo.player.LogText;
					return;
				}

				// Monitor the player's quest log. If the text changes, update it for all players.
				// Can't think of a better way to do this LOL...
				newLogText =  pmo.player.LogText;
				if (oldLogText != newLogText)
				{
					for (int i = 0; i < MAXPLAYERS; i++)
					{
						if (playeringame[i])
						{
							PlayerPawn currentPlayer = players[i].mo;

							// skip self
							if (currentPlayer == pmo)
							{
								if (currentPlayer.CheckLocalView())
								{
									Console.MidPrint(NULL, "$TXT_LOGUPDATED");
								}
								continue;
							}

							// get the log number
							String txt = newLogText;
							int num = txt.Mid("\$TXT_ILOG".Length()).ToInt();

							if (currentPlayer.CheckLocalView())
							{
								currentPlayer.player.SetLogNumber(num);

								// hack needed to make subtitles show up when you kill AlienSpectre5...
								if (num == 83 || num == 85)
								{
									String voc = "svox/voc" .. num;
									currentPlayer.player.SetSubtitleNumber(num, voc);
								}
							}
						}
					}

					oldLogText = newLogText;
				}
			}
		}

		Super.DoEffect();
	}
}
