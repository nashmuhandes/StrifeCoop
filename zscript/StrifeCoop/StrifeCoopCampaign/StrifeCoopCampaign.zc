// Copyright 2021 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// StrifeCoopCampaign
// A persistent singleton to store info about the current campaign
//
//===========================================================================

class StrifeCoopCampaign : Thinker
{
	// mark this game as a multiplayer game.
	// this is to prevent loading a single player save into a multiplayer session,
	// which would most likely break things, so we don't allow it.
	bool isCoopGame;

	bool initDone;

	int campaignTime;

	// track player stats globally
	// ATTENTION: this is obviously designed for Strife's single player campaign where it's not designed
	// for each player to have individual upgrades.
	// For a custom campaign where such things would be allowed, this would need to reworked.
	// Additionally, this only works correctly for stats that keep increasing. I assume this system will
	// break if a mod makes it possible for stats to decrease.
	int maxStamina, maxAccuracy;

	// store log text globally
	String latestLogText;

	// keep a global record of QuestItems acquired throughout the journey
	Array< class<Inventory> > retrievedQuestItems;

	// enemy scaling
	bool oldScaleEnemies, newScaleEnemies;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	StrifeCoopCampaign Init(void)
	{
		ChangeStatNum(STAT_STATIC);

		if (!initDone)
		{
			if (multiplayer && (multiplayer && !deathmatch))
			{
				isCoopGame = true;
			}
			initDone = true;
		}

		return self;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	static clearscope StrifeCoopCampaign GetInstance(void)
	{
		ThinkerIterator it = ThinkerIterator.Create("StrifeCoopCampaign", STAT_STATIC);
		let p = StrifeCoopCampaign(it.Next());
		if (p) return p;
		else return NULL;
	}

	clearscope int GetTimeInSeconds(void)
	{
		return (campaignTime / Thinker.TICRATE);
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void Tick(void)
	{
		SyncQuestItems();
		CheckEnemyScalingSettings();

		// STAT_STATIC thinkers don't automatically tick.
		// This would usually be called by StrifeCoopHandler::WorldTick

		campaignTime++;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void SyncQuestItems(void)
	{
		if (!multiplayer) return;

		// No, there really isn't a better way to do this for the vanilla quest items.
		// Actor replacement doesn't work because too many parts of the game check for the
		// original items directly by class name.

		// First, collect all of the items each player has
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (playeringame[i])
			{
				PlayerInfo plr = players[i];
				let pmo = players[i].mo;

				if (pmo && plr)
				{
					for (Inventory item = pmo.Inv; item != NULL; item = item.Inv)
					{
						if (item is "QuestItem" || item is "Communicator" || item is "StrifeKey" || item is "PrisonPass" || item is "Sigil")
						{
							class<Inventory> cls = item.GetClass();
							if (cls)
							{
								if (retrievedQuestItems.Find(cls) == retrievedQuestItems.Size())
								{
									//Console.Printf("Found %s on player %d", cls.GetClassName(), pmo.PlayerNumber() + 1);
									retrievedQuestItems.Push(cls);
								}
							}
						}
					}
				}
			}
		}

		// Then, distribute the items to all players
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (playeringame[i])
			{
				PlayerInfo plr = players[i];
				let pmo = players[i].mo;

				if (pmo && plr)
				{
					for (int j = 0; j < retrievedQuestItems.Size(); j++)
					{
						let a = pmo.FindInventory(retrievedQuestItems[j], true);
						if (!a)
						{
							//Console.Printf("Giving %s to player %d", retrievedQuestItems[j].GetClassName(), pmo.PlayerNumber() + 1);
							pmo.A_GiveInventory(retrievedQuestItems[j], 1);
						}
					}
				}
			}
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	private void CheckEnemyScalingSettings(void)
	{
		newScaleEnemies = strifecoop_scaleenemies;
		if (oldScaleEnemies != newScaleEnemies)
		{
			DoScaleEnemies();
			//Console.Printf("Enemy scaling settings have changed. Rescaling enemies...");
			oldScaleEnemies = newScaleEnemies;
		}
	}

	void DoScaleEnemies(void)
	{
		ThinkerIterator it = ThinkerIterator.Create("Actor");
		Actor mo;
		while (mo = Actor(it.Next()))
		{
			let plugin = StrifeCoopNPCPlugin.Find(mo);
			if (plugin)
			{
				plugin.ScaleStats();
			}
		}
	}
}
