#library "strfhelp"

#include "zcommon.acs"

#define VDOORSPEED  16
#define VDOORWAIT   150

// [Nash] why doesn't ACC have this defined internally?!
#define MAXPLAYERS 4

#define SEWAGE_DRAIN_DURATION (35 * 9)

// [Nash] it's impossible to not clash with other mods... all I can say is, don't play gameplay mods that use ACS libraries. :P
world bool	243: freedPrisoners;
world int	244: sewageDrainCounter;
world bool	245: map29PlayerIsDead[];
world bool	246: map29PointOfNoReturn;
world int	247: map29PointOfNoReturnSpawnTIDs[];
world bool	248: isFrontBaseAccessible;
world int	249: map28PointOfNoReturn;
world int	250: map28PointOfNoReturn2SpawnTIDs[];
world int	251: map28PointOfNoReturn1SpawnTIDs[];
world bool	252: map25PointOfNoReturn;
world int	253: map25PointOfNoReturnSpawnTIDs[];
world bool	254: map09PointOfNoReturn;
world int	255: map09PointOfNoReturnSpawnTIDs[];

global int	62: travelCooldown;
global int	63: GYPCooldown;

str QuestItems[32] =
{
	"QuestItemThatDoesNotExist",
	"QuestItem1", "QuestItem2", "QuestItem3",
	"QuestItem4", "QuestItem5", "QuestItem6", "QuestItem7",
	"QuestItem8", "QuestItem9", "QuestItem10", "QuestItem11",
	"QuestItem12", "QuestItem13", "QuestItem14", "QuestItem15",
	"QuestItem16", "QuestItem17", "QuestItem18", "QuestItem19",
	"QuestItem20", "QuestItem21", "QuestItem22", "QuestItem23",
	"QuestItem24", "QuestItem25", "QuestItem26", "QuestItem27",
	"QuestItem28", "QuestItem29", "QuestItem30", "QuestItem31"
};

str MusicNames[34] =
{
	"",
	"d_action",
	"d_tavern",
	"d_danger",
	"d_fast",
	"d_intro",
	"d_darker",
	"d_strike",
	"d_slide",
	"d_tribal",
	"d_march",
	"d_danger",
	"d_mood",
	"d_castle",
	"d_darker",
	"d_action",
	"d_fight",
	"d_spense",
	"d_slide",
	"d_strike",
	"d_dark",
	"d_tech",
	"d_slide",
	"d_drone",
	"d_panthr",
	"d_sad",
	"d_instry",
	"d_tech",
	"d_action",
	"d_instry",
	"d_drone",
	"d_fight",
	"d_happy",
	"d_end"
};

// Script 0 is used to implement several of Strife's unique line types.
// It's also used to implement the sky change after the Programmer dies.

script << 0 >> (int type, int tag)
{
	int i;

	switch (type)
	{
	// WALK TRIGGERS

	case 230:
		i = GetLineRowOffset() & 31;
		if (i == 0) break;
		if (CheckInventory (QuestItems[i]) || gametype() == GAME_NET_DEATHMATCH)
		{
			Door_Open (tag, VDOORSPEED);
			clearlinespecial ();
		}
		break;

	case 227:
		i = GetLineRowOffset() & 31;
		if (i == 0) break;
		if (CheckInventory (QuestItems[i]) || gametype() == GAME_NET_DEATHMATCH)
		{
			Door_Close (tag, VDOORSPEED);
			clearlinespecial ();
		}
		break;

	case 228:
		// [Nash] Moved the sound-playing and subtitle-handling stuff to ZScript.
		if (CheckInventory ("QuestItem24"))
		{
			str soundToPlay = "svox/voc128";
			if (CheckInventory ("QuestItem28"))
			{
				soundToPlay = "svox/voc130";
			}
			ScriptCall("StrifeCoopHandler", "PlayEntityGreeting", soundToPlay);
			clearlinespecial ();
		}
		break;

	case 196:
		if (GetSigilPieces() > 1)
		{
			Floor_LowerToLowest (tag, 8);
			clearlinespecial ();
		}
		break;

	case 197:
		if (GetSigilPieces() > 1)
		{
			// [Nash] This is when you're approaching the Oracle to decide whether to kill Macil or not.
			// Make it a fast lethal crusher so that players don't break the sequence
			Ceiling_LowerAndCrushDist(tag, 200, 0x7FFFFFFF, 0, 1);
			clearlinespecial ();
		}
		break;

	case 212:
		if (CheckInventory ("FlameThrower"))
		{
			Floor_LowerToLowest (tag, 8);
			clearlinespecial ();
		}
		break;

	case 193:
		i = GetLineRowOffset() & 31;
		if (i == 0) break;
		if (CheckInventory (QuestItems[i]) || gametype() == GAME_NET_DEATHMATCH)
		{
			Floor_LowerToLowest (tag, 8);
			clearlinespecial ();
		}
		break;

	case 11:
		// [Nash] note: line type 11 is the exit switches for deathmatch
		if (tag == 0)
		{
			Exit_Normal (0);
		}
		else
		{
			Teleport_NewMap (tag, 0, FALSE);
		}
		break;

	case 52:
		// [Nash] TO DO: find out where this is used?
		tag /= 100;
		if (tag == 0)
		{
			Exit_Normal (0);
		}
		else
		{
			Teleport_NewMap (tag, 0, FALSE);
		}
		break;

	case 187:
		i = GetLineRowOffset() & 31;
		if (i == 0) break;
		if (CheckInventory (QuestItems[i]) || gametype() == GAME_NET_DEATHMATCH)
		{
			ClearForceField (tag);
			clearlinespecial ();
		}
		break;

	case 188:
		if (CheckInventory ("QuestItem16") || gametype() == GAME_NET_DEATHMATCH)
		{
			Door_Open (tag, VDOORSPEED);
			clearlinespecial ();
		}
		break;

	case 200:
		if (CheckInventory ("Sigil"))
		{
			Door_Open (tag, VDOORSPEED);
			clearlinespecial ();
		}
		break;

	case 215:
		// [Nash] note: line type 215 is used for most of the lines that trigger a transmission from Blackbird
		i = (tag % 100) & 31;
		if (CheckInventory (QuestItems[i]) || gametype() == GAME_NET_DEATHMATCH)
		{
			BroadcastToCommunicators(tag / 100, 0, 1, 0);
			clearlinespecial ();
		}
		break;

	case 204:
	case 203:
		if (tag >= 0 && tag <= 33)
		{
			SetMusic (MusicNames[tag]);
		}
		break;


	// WALK RETRIGGERS

	case 216:
		i = GetLineRowOffset() & 31;
		if (i == 0) break;
		if (CheckInventory (QuestItems[i]) || gametype() == GAME_NET_DEATHMATCH)
		{
			Door_Raise (tag, VDOORSPEED, VDOORWAIT);
		}
		break;

	case 186:
		if (lineside() != LINE_FRONT)
			break;
	case 145:
		// [Nash] note: line type 145 is the normal travel (level exit) lines
		if (gametype() == GAME_NET_DEATHMATCH)
		{
			Floor_RaiseByValue (tag, 128, 64);
			clearlinespecial();
		}
		else
		{
			if (travelCooldown != 0) break;
			if (ScriptCall("StrifeCoopHandler", "PartyGathered"))
			{
				// Wait a few seconds before letting players travel again
				// This is so that players don't accidentally bump into the wrong travel direction at map start
				// which can happen if a player is confused with their orientation
				travelCooldown = (35 * 3);
				bool facing = TRUE;
				if (gametype() == GAME_NET_DEATHMATCH || gametype() == GAME_NET_COOPERATIVE) facing = FALSE;
				Teleport_NewMap (tag/100, tag%100, facing);
			}
			else
			{
				if (GYPCooldown == 0)
				{
					Print(l: "GYP_MUSTGATHERPARTY");
					LocalAmbientSound("*usefail", 127);
				}
				GYPCooldown = 35;
			}
		}
		break;

	case 175:
		if (GetActorFloorZ(0) + 16.0 > GetActorZ(0))
		{
			NoiseAlert (0, 0);
		}
		break;

	case 198:
		if (!CheckInventory ("OfficersUniform"))
		{
			NoiseAlert (0, 0);
		}
		break;

	case 208:
		if (CheckInventory ("FlameThrower"))
		{
			NoiseAlert (0, 0);
		}
		break;

	case 206:
		if (CheckInventory ("OfferingChalice"))
		{
			NoiseAlert (0, 0);
		}
		break;

	case 184:
		if (Plat_UpNearestWaitDownStay (tag, 16, 35))
		{
			// FIXME
		}
		break;

	case 213:
		if (!CheckInventory ("OfferingChalice"))
		{
			print (l:"TXT_NEED_CHALICE");
			activatorsound ("*usefail", 127);
			SetResultValue (0);
		}
		else
		{
			SetResultValue (Door_Raise (0, VDOORSPEED, VDOORWAIT, tag));
		}
		break;

	case 232:
		if (!CheckInventory ("QuestItem18") && gametype() != GAME_NET_DEATHMATCH)
		{
			print (l:"TXT_NEED_OPASS");
			activatorsound ("*usefail", 127);
			SetResultValue (0);
		}
		else
		{
			SetResultValue (Door_Raise (0, VDOORSPEED, VDOORWAIT, tag));
		}
		break;

	case 180:
	case 181:
		SetResultValue (Floor_RaiseByValueTxTy (tag, 8, 512));
		break;

	case 194:
		if (Door_Open (tag, VDOORSPEED))
		{
			printbold (l:"TXT_FREED_PRISONERS");
			GiveInventory ("QuestItem13", 1);
			if (!freedPrisoners)
			{
				freedPrisoners = TRUE;
				ModifyPrisonerTeleporterLines();
			}
		}
		else
		{
			SetResultValue (0);
		}
		break;

	case 199:
		if (Ceiling_LowerAndCrush (tag, 8, 10))
		{
			printbold (l:"TXT_DESTROYED_CONVERTER");
			GiveInventory ("QuestItem25", 1);
			GiveInventory ("UpgradeStamina", 10);
			GiveInventory ("UpgradeAccuracy", 1);
		}
		else
		{
			SetResultValue (0);
		}
		break;

	case 209:
		if (CheckInventory ("OfferingChalice"))
		{
			SetResultValue (Generic_Stairs (tag, 16, 16, 0, 0));
		}
		else
		{
			print (l:"TXT_NEED_CHALICE");
			activatorsound ("*usefail", 127);
			SetResultValue (0);
		}
		break;

	case 219:
	case 220:
		SetResultValue (Floor_LowerToHighest (tag, 8, 128));
		break;

	case 226:
		if (Floor_LowerToHighest (tag, 8, 128))
		{
			GiveInventory ("UpgradeStamina", 10);
			GiveInventory ("UpgradeAccuracy", 1);
			printbold (l:"TXT_COMPLETED_TRAINING");
		}
		else
		{
			SetResultValue (0);
		}
		break;

	case 154:
		SetResultValue (Plat_DownWaitUpStayLip (tag, 32, 105, 0));
		break;

	case 177:
		SetResultValue (Plat_DownWaitUpStayLip (tag, 32, 105, 0));
		break;

	case 214:	// This only needs to be ACS for the long delay
		SetResultValue (Plat_DownWaitUpStayLip (tag, 8, 1050, 0, 1));
		break;

	case 235:
		if (GetSigilPieces() < 5)
		{
			SetResultValue (0);
			break;
		}
		// Intentional fall-through
	case 174:
	case 40:
	case 189:
	case 233:
		i = Door_Open (tag, VDOORSPEED/2);
		i = i | Floor_LowerToLowest (tag, VDOORSPEED/2);
		SetResultValue (i);
		if (type == 233 && i)
		{
			// [Nash] this is supposed to play after flipping the switch that reveals the computer core in MAP15
			BroadcastToCommunicators(70, 0, 0, 0);
		}
		break;

	case 183:
		i = Door_Open (tag, VDOORSPEED/2);
		i = i | Floor_LowerToHighest (tag, VDOORSPEED/2, 128);
		SetResultValue (i);
		break;

	case 229:
		SetResultValue (0);
		if (GetSigilPieces() == 5)
		{
			SetResultValue (Door_Animated (tag, 4, 105));
		}
		break;

	case 234:
		if (CheckInventory ("QuestItem3") || gametype() == GAME_NET_DEATHMATCH)
		{
			SetResultValue (Door_Raise (tag, VDOORSPEED, VDOORWAIT));
		}
		else
		{
			SetResultValue (Door_LockedRaise (0, 0, 0, 102));
		}
		break;

	case 256:
		// Not a line type, but used by the Programmer death script.
		ChangeSky ("SKYMNT01", "SKYMNT01");
		break;
	}
}

//===========================================================================
//
//
//
//===========================================================================

script "StrifeCoop_GlobalCooldownScript" OPEN
{
	while(1)
	{
		if (GYPCooldown > 0) GYPCooldown--;
		if (travelCooldown > 0) travelCooldown--;
		Delay(1);
	}
}

//===========================================================================
//
//
//
//===========================================================================

function void BroadcastToCommunicators(int voc_id, int front_only, int identify, int nolog)
{
	// We send this off to ZScript because handling multiple players is easier there.
	ScriptCall("StrifeCoopHandler", "BroadcastToCommunicators", voc_id, front_only, identify, nolog);
}

script "StrifeCoop_SendToCommunicator" (int voc_id, int front_only, int identify)
{
	int nolog = 0;
	SendToCommunicator(voc_id, front_only, identify, nolog);
}

script "StrifeCoop_SendToCommunicatorNoLog" (int voc_id, int front_only, int identify)
{
	int nolog = 1;
	SendToCommunicator(voc_id, front_only, identify, nolog);
}

//===========================================================================
//
//
//
//===========================================================================

script "StrifeCoop_MAP02FrontBaseExitLineScriptOpen" OPEN
{
	if (GetLevelInfo(LEVELINFO_LEVELNUM) != 2) Terminate;
	ModifyFrontBaseExitLine();
}

script "StrifeCoop_MAP02FrontBaseExitLineScriptReopen" REOPEN
{
	if (GetLevelInfo(LEVELINFO_LEVELNUM) != 2) Terminate;
	ModifyFrontBaseExitLine();
}

script "StrifeCoop_MAP02OpenFrontBaseScript" (void)
{
	if (GetLevelInfo(LEVELINFO_LEVELNUM) == 2)
	{
		if (!isFrontBaseAccessible)
		{
			isFrontBaseAccessible = TRUE;
			Generic_Stairs(28, 16, 16, 0, 0);
			ModifyFrontBaseExitLine();
			ClearLineSpecial();
		}
	}
}

function void ModifyFrontBaseExitLine(void)
{
	if (GetLevelInfo(LEVELINFO_LEVELNUM) != 2) return;

	if (!isFrontBaseAccessible)
	{
		// front base isn't accessible yet; clear the exit line special
		SetLineSpecial(55555, 0);
	}
	else
	{
		// front base is now accessible; restore the exit line special
		SetLineSpecial(55555, ACS_ExecuteAlways, 0, 0, 145, 301);
		Line_SetBlocking(55555, BLOCKF_PLAYERS, 0);
		SetLineActivation(55555, (SPAC_Push | SPAC_UseBack));
	}
}

//===========================================================================
//
//
//
//===========================================================================

script "StrifeCoop_MAP05PrisonerTeleporterLinesScriptOpen" OPEN
{
	if (GetLevelInfo(LEVELINFO_LEVELNUM) != 5) Terminate;
	ModifyPrisonerTeleporterLines();
}

script "StrifeCoop_MAP05PrisonerTeleporterLinesScriptReopen" REOPEN
{
	if (GetLevelInfo(LEVELINFO_LEVELNUM) != 5) Terminate;
	ModifyPrisonerTeleporterLines();
}

function void ModifyPrisonerTeleporterLines(void)
{
	if (GetLevelInfo(LEVELINFO_LEVELNUM) != 5) return;

	if (!freedPrisoners)
	{
		// teleporter to the front base isn't accessible yet; clear the exit line special
		SetLineSpecial(55555, 0);
		SetLineSpecial(55556, 0);
		SetLineSpecial(55557, 0);
		SetLineSpecial(55558, 0);

		SetLineSpecial(55559, 0);
		SetLineSpecial(55560, 0);
		SetLineSpecial(55561, 0);
		SetLineSpecial(55562, 0);

		SetLineSpecial(55563, 0);
		SetLineSpecial(55564, 0);
		SetLineSpecial(55565, 0);
		SetLineSpecial(55566, 0);

		SetLineSpecial(55567, 0);
		SetLineSpecial(55568, 0);
		SetLineSpecial(55569, 0);
		SetLineSpecial(55570, 0);
	}
	else
	{
		// teleporter to the front base is now accessible; restore the exit line special
		SetLineSpecial(55555, ACS_ExecuteAlways, 0, 0, 145, 302);
		SetLineSpecial(55556, ACS_ExecuteAlways, 0, 0, 145, 302);
		SetLineSpecial(55557, ACS_ExecuteAlways, 0, 0, 145, 302);
		SetLineSpecial(55558, ACS_ExecuteAlways, 0, 0, 145, 302);

		SetLineSpecial(55559, ACS_ExecuteAlways, 0, 0, 145, 302);
		SetLineSpecial(55560, ACS_ExecuteAlways, 0, 0, 145, 302);
		SetLineSpecial(55561, ACS_ExecuteAlways, 0, 0, 145, 302);
		SetLineSpecial(55562, ACS_ExecuteAlways, 0, 0, 145, 302);

		SetLineSpecial(55563, ACS_ExecuteAlways, 0, 0, 145, 302);
		SetLineSpecial(55564, ACS_ExecuteAlways, 0, 0, 145, 302);
		SetLineSpecial(55565, ACS_ExecuteAlways, 0, 0, 145, 302);
		SetLineSpecial(55566, ACS_ExecuteAlways, 0, 0, 145, 302);

		SetLineSpecial(55567, ACS_ExecuteAlways, 0, 0, 145, 302);
		SetLineSpecial(55568, ACS_ExecuteAlways, 0, 0, 145, 302);
		SetLineSpecial(55569, ACS_ExecuteAlways, 0, 0, 145, 302);
		SetLineSpecial(55570, ACS_ExecuteAlways, 0, 0, 145, 302);

		Line_SetBlocking(55555, BLOCKF_PLAYERS, 0);
		Line_SetBlocking(55556, BLOCKF_PLAYERS, 0);
		Line_SetBlocking(55557, BLOCKF_PLAYERS, 0);
		Line_SetBlocking(55558, BLOCKF_PLAYERS, 0);

		Line_SetBlocking(55559, BLOCKF_PLAYERS, 0);
		Line_SetBlocking(55560, BLOCKF_PLAYERS, 0);
		Line_SetBlocking(55561, BLOCKF_PLAYERS, 0);
		Line_SetBlocking(55562, BLOCKF_PLAYERS, 0);

		Line_SetBlocking(55563, BLOCKF_PLAYERS, 0);
		Line_SetBlocking(55564, BLOCKF_PLAYERS, 0);
		Line_SetBlocking(55565, BLOCKF_PLAYERS, 0);
		Line_SetBlocking(55566, BLOCKF_PLAYERS, 0);

		Line_SetBlocking(55567, BLOCKF_PLAYERS, 0);
		Line_SetBlocking(55568, BLOCKF_PLAYERS, 0);
		Line_SetBlocking(55569, BLOCKF_PLAYERS, 0);
		Line_SetBlocking(55570, BLOCKF_PLAYERS, 0);

		SetLineActivation(55555, (SPAC_Push | SPAC_UseBack));
		SetLineActivation(55556, (SPAC_Push | SPAC_UseBack));
		SetLineActivation(55557, (SPAC_Push | SPAC_UseBack));
		SetLineActivation(55558, (SPAC_Push | SPAC_UseBack));

		SetLineActivation(55559, (SPAC_Push | SPAC_UseBack));
		SetLineActivation(55560, (SPAC_Push | SPAC_UseBack));
		SetLineActivation(55561, (SPAC_Push | SPAC_UseBack));
		SetLineActivation(55562, (SPAC_Push | SPAC_UseBack));

		SetLineActivation(55563, (SPAC_Push | SPAC_UseBack));
		SetLineActivation(55564, (SPAC_Push | SPAC_UseBack));
		SetLineActivation(55565, (SPAC_Push | SPAC_UseBack));
		SetLineActivation(55566, (SPAC_Push | SPAC_UseBack));

		SetLineActivation(55567, (SPAC_Push | SPAC_UseBack));
		SetLineActivation(55568, (SPAC_Push | SPAC_UseBack));
		SetLineActivation(55569, (SPAC_Push | SPAC_UseBack));
		SetLineActivation(55570, (SPAC_Push | SPAC_UseBack));
	}
}

//===========================================================================
//
//
//
//===========================================================================

script "StrifeCoop_MAP07SewerExitLineScriptOpen" OPEN
{
	if (GetLevelInfo(LEVELINFO_LEVELNUM) != 7) Terminate;
	ModifySewerExitLine();
}

script "StrifeCoop_MAP07SewerExitLineScriptReopen" REOPEN
{
	if (GetLevelInfo(LEVELINFO_LEVELNUM) != 7) Terminate;
	ModifySewerExitLine();
}

script "StrifeCoop_MAP07DrainReclamationTankScript" (void)
{
	if (GetLevelInfo(LEVELINFO_LEVELNUM) == 7)
	{
		if (sewageDrainCounter == 0)
		{
			Floor_LowerToLowest(6, 8);
			ClearLineSpecial();

			// takes about 9 seconds for the sewage to lower completely
			while (sewageDrainCounter < SEWAGE_DRAIN_DURATION)
			{
				sewageDrainCounter++;
				Delay(1);
			}

			ModifySewerExitLine();
		}
	}
}

function void ModifySewerExitLine(void)
{
	if (GetLevelInfo(LEVELINFO_LEVELNUM) != 7) return;

	if (sewageDrainCounter < SEWAGE_DRAIN_DURATION)
	{
		// sewage tank isn't drained yet; clear the exit line special
		SetLineSpecial(55555, 0);
		SetLineSpecial(55556, 0);
	}
	else if (sewageDrainCounter >= SEWAGE_DRAIN_DURATION)
	{
		// sewage tank is now drained; restore the exit line special
		SetLineSpecial(55555, ACS_ExecuteAlways, 0, 0, 145, 603);
		SetLineSpecial(55556, ACS_ExecuteAlways, 0, 0, 145, 603);
		Line_SetBlocking(55555, BLOCKF_PLAYERS, 0);
		Line_SetBlocking(55556, BLOCKF_PLAYERS, 0);
		SetLineActivation(55555, (SPAC_Push | SPAC_UseBack));
		SetLineActivation(55556, (SPAC_Push | SPAC_UseBack));
	}
}

//===========================================================================
//
//
//
//===========================================================================

script "StrifeCoop_MAP09PointOfNoReturnScript" (void)
{
	ClearLineSpecial();
	Ceiling_LowerAndCrushDist(11, 200, 0x7FFFFFFF, 0, 1);

	if (!map09PointOfNoReturn)
	{
		if (GameType() == GAME_NET_COOPERATIVE)
		{
			// Spawn the new map spots for the resurrecting players to teleport to.
			int tid = 0;

			// Player 1
			tid = UniqueTID();
			map09PointOfNoReturnSpawnTIDs[0] = tid;
			SpawnForced("MapSpotGravity", -624.0, 2208.0, 128.0, tid, 0);

			// Player 2
			tid = UniqueTID();
			map09PointOfNoReturnSpawnTIDs[1] = tid;
			SpawnForced("MapSpotGravity", -672.0, 2208.0, 128.0, tid, 0);

			// Player 3
			tid = UniqueTID();
			map09PointOfNoReturnSpawnTIDs[2] = tid;
			SpawnForced("MapSpotGravity", -672.0, 2256.0, 128.0, tid, 0);

			// Player 4
			tid = UniqueTID();
			map09PointOfNoReturnSpawnTIDs[3] = tid;
			SpawnForced("MapSpotGravity", -672.0, 2160.0, 128.0, tid, 0);
		}

		map09PointOfNoReturn = TRUE;
	}
}

script "StrifeCoop_MAP09PointOfNoReturnPlayerRespawnScript" RESPAWN
{
	if (GetLevelInfo(LEVELINFO_LEVELNUM) == 9)
	{
		if (GameType() == GAME_NET_COOPERATIVE && map09PointOfNoReturn == TRUE)
		{
			Thing_Move(0, map09PointOfNoReturnSpawnTIDs[PlayerNumber()], FALSE);
		}
	}
}

script "StrifeCoop_MAP09ProgrammerTrapScript" (void)
{
	ClearLineSpecial();
	Ceiling_LowerAndCrushDist(3, 200, 0x7FFFFFFF, 0, 1);
	int octics = 240;
	Delay((octics * 4.375) >> 16);
	Door_Open(3, 16);
}

//===========================================================================
//
//
//
//===========================================================================

script "StrifeCoop_MAP25PointOfNoReturnScript" (void)
{
	ClearLineSpecial();
	Floor_RaiseToLowestCeiling(999, 8);

	if (!map25PointOfNoReturn)
	{
		if (GameType() == GAME_NET_COOPERATIVE)
		{
			// Spawn the new map spots for the resurrecting players to teleport to.
			int tid = 0;

			// Player 1
			tid = UniqueTID();
			map25PointOfNoReturnSpawnTIDs[0] = tid;
			SpawnForced("MapSpotGravity", 3304.0, 1720.0, 24.0, tid, 160);

			// Player 2
			tid = UniqueTID();
			map25PointOfNoReturnSpawnTIDs[1] = tid;
			SpawnForced("MapSpotGravity", 3352.0, 1728.0, 24.0, tid, 160);

			// Player 3
			tid = UniqueTID();
			map25PointOfNoReturnSpawnTIDs[2] = tid;
			SpawnForced("MapSpotGravity", 3304.0, 1776.0, 24.0, tid, 160);

			// Player 4
			tid = UniqueTID();
			map25PointOfNoReturnSpawnTIDs[3] = tid;
			SpawnForced("MapSpotGravity", 3352.0, 1784.0, 24.0, tid, 160);
		}

		map25PointOfNoReturn = TRUE;
	}
}

script "StrifeCoop_MAP25PointOfNoReturnPlayerRespawnScript" RESPAWN
{
	if (GetLevelInfo(LEVELINFO_LEVELNUM) == 25)
	{
		if (GameType() == GAME_NET_COOPERATIVE && map25PointOfNoReturn == TRUE)
		{
			Thing_Move(0, map25PointOfNoReturnSpawnTIDs[PlayerNumber()], FALSE);
		}
	}
}

//===========================================================================
//
//
//
//===========================================================================

script "StrifeCoop_MAP28PointOfNoReturn1Script" (void)
{
	ClearLineSpecial();
	Floor_RaiseToLowestCeiling(11, 8);

	if (map28PointOfNoReturn == 0)
	{
		if (GameType() == GAME_NET_COOPERATIVE)
		{
			// Spawn the new map spots for the resurrecting players to teleport to.
			int tid = 0;

			// Player 1
			tid = UniqueTID();
			map28PointOfNoReturn1SpawnTIDs[0] = tid;
			SpawnForced("MapSpotGravity", 2848.0, -1856.0, 0.0, tid, 64);

			// Player 2
			tid = UniqueTID();
			map28PointOfNoReturn1SpawnTIDs[1] = tid;
			SpawnForced("MapSpotGravity", 2912.0, -1856.0, 0.0, tid, 64);

			// Player 3
			tid = UniqueTID();
			map28PointOfNoReturn1SpawnTIDs[2] = tid;
			SpawnForced("MapSpotGravity", 2976.0, -1856.0, 0.0, tid, 64);

			// Player 4
			tid = UniqueTID();
			map28PointOfNoReturn1SpawnTIDs[3] = tid;
			SpawnForced("MapSpotGravity", 3040.0, -1856.0, 0.0, tid, 64);
		}

		map28PointOfNoReturn = 1;
	}
}

script "StrifeCoop_MAP28PointOfNoReturn2Script" (void)
{
	ClearLineSpecial();
	Ceiling_LowerAndCrushDist(3, 200, 0x7FFFFFFF, 0, 1);

	if (map28PointOfNoReturn == 1)
	{
		if (GameType() == GAME_NET_COOPERATIVE)
		{
			// Spawn the new map spots for the resurrecting players to teleport to.
			int tid = 0;

			// Player 1
			tid = UniqueTID();
			map28PointOfNoReturn2SpawnTIDs[0] = tid;
			SpawnForced("MapSpotGravity", 2976.0, -992.0, -48.0, tid, 64);

			// Player 2
			tid = UniqueTID();
			map28PointOfNoReturn2SpawnTIDs[1] = tid;
			SpawnForced("MapSpotGravity", 3040.0, -992.0, -48.0, tid, 64);

			// Player 3
			tid = UniqueTID();
			map28PointOfNoReturn2SpawnTIDs[2] = tid;
			SpawnForced("MapSpotGravity", 3104.0, -992.0, -48.0, tid, 64);

			// Player 4
			tid = UniqueTID();
			map28PointOfNoReturn2SpawnTIDs[3] = tid;
			SpawnForced("MapSpotGravity", 3168.0, -992.0, -48.0, tid, 64);

			// Immediately teleport any players who are still left behind
			int activatingPlayerNumber = PlayerNumber();
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (PlayerInGame(i))
				{
					if (SetActivator(0, AAPTR_PLAYER1 << i))
					{
						// skip the player who activated the line
						if (PlayerNumber() == activatingPlayerNumber)
						{
							continue;
						}

						// save original player TID (if they have one)
						int otid = ActivatorTID();

						// generate a temporary unique TID
						int ntid = UniqueTID();

						// change player TID to the temporary unique TID
						Thing_ChangeTID(otid, ntid);

						// teleport the player (if left behind)
						if (GetActorY(ntid) < -1440.0)
						{
							TeleportOther(ntid, map28PointOfNoReturn2SpawnTIDs[PlayerNumber()], TRUE);
						}

						// restore original player TID
						Thing_ChangeTID(ntid, otid);
					}
				}
			}
		}

		map28PointOfNoReturn = 2;
	}
}

/*
// I don't remember why this script exists LOL
script "StrifeCoop_MAP28ExitToEntityLairScript" (void)
{
	map28PointOfNoReturn = 3;
	ACS_ExecuteAlways(0, 0, 145, 2901);
}
*/

script "StrifeCoop_MAP28PointOfNoReturnPlayerRespawnScript" RESPAWN
{
	if (GetLevelInfo(LEVELINFO_LEVELNUM) == 28)
	{
		if (GameType() == GAME_NET_COOPERATIVE)
		{
			if (map28PointOfNoReturn < 3)
			{
				if (map28PointOfNoReturn == 1)
				{
					Thing_Move(0, map28PointOfNoReturn1SpawnTIDs[PlayerNumber()], FALSE);
				}
				else if (map28PointOfNoReturn == 2)
				{
					Thing_Move(0, map28PointOfNoReturn2SpawnTIDs[PlayerNumber()], FALSE);
				}
			}
		}
	}
}

//===========================================================================
//
//
//
//===========================================================================

script "StrifeCoop_MAP29PointOfNoReturnScript" (void)
{
	ClearLineSpecial();
	ACS_ExecuteAlways(0, 0, 197, 8);

	if (!map29PointOfNoReturn)
	{
		if (GameType() == GAME_NET_COOPERATIVE)
		{
			// Spawn the new map spots for the resurrecting players to teleport to.
			int tid = 0;

			// Player 1
			tid = UniqueTID();
			map29PointOfNoReturnSpawnTIDs[0] = tid;
			SpawnForced("MapSpotGravity", -21528.0, 13792.0, -552.0, tid, 0);

			// Player 2
			tid = UniqueTID();
			map29PointOfNoReturnSpawnTIDs[1] = tid;
			SpawnForced("MapSpotGravity", -21584.0, 13792.0, -552.0, tid, 0);

			// Player 3
			tid = UniqueTID();
			map29PointOfNoReturnSpawnTIDs[2] = tid;
			SpawnForced("MapSpotGravity", -21536.0, 13856.0, -552.0, tid, 0);

			// Player 4
			tid = UniqueTID();
			map29PointOfNoReturnSpawnTIDs[3] = tid;
			SpawnForced("MapSpotGravity", -21536.0, 13728.0, -552.0, tid, 0);
		}

		map29PointOfNoReturn = TRUE;

		// Tell StrifeCoopHandler::InputProcess that the +use key
		// can now be eaten from this point onwards
		ScriptCall("StrifeCoopCampaign", "SetIsFightingEntity", TRUE);

		// force teleport other players into the Entity's room
		int activatingPlayerNumber = PlayerNumber();
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (PlayerInGame(i))
			{
				if (SetActivator(0, AAPTR_PLAYER1 << i))
				{
					// skip the player who activated the line
					if (PlayerNumber() == activatingPlayerNumber)
					{
						continue;
					}

					// save original player TID (if they have one)
					int otid = ActivatorTID();

					// generate a temporary unique TID
					int ntid = UniqueTID();

					// change player TID to the temporary unique TID
					Thing_ChangeTID(otid, ntid);

					// teleport the player
					TeleportOther(ntid, map29PointOfNoReturnSpawnTIDs[PlayerNumber()], TRUE);

					// restore original player TID
					Thing_ChangeTID(ntid, otid);
				}
			}
		}
	}
}

script "StrifeCoop_MAP29PointOfNoReturnPlayerRespawnScript" RESPAWN
{
	if (GetLevelInfo(LEVELINFO_LEVELNUM) == 29)
	{
		if (GameType() == GAME_NET_COOPERATIVE && map29PointOfNoReturn == TRUE)
		{
			if (!GetCVar("strifecoop_badending"))
			{
				Thing_Move(0, map29PointOfNoReturnSpawnTIDs[PlayerNumber()], FALSE);
			}
			else
			{
				// Force death on the bad ending. You can no longer resurrect...
				Thing_Damage(0, 0x7FFFFFFF, MOD_UNKNOWN);
			}
		}
	}
}

script "StrifeCoop_MAP29DeathScript" DEATH
{
	// Keep track of which player was killed by the Entity
	if (GetLevelInfo(LEVELINFO_LEVELNUM) == 29)
	{
		if (GameType() == GAME_NET_COOPERATIVE && map29PointOfNoReturn == TRUE)
		{
			if (GetCVar("strifecoop_badending"))
			{
				map29PlayerIsDead[PlayerNumber()] = TRUE;
			}
		}
	}
}

script "StrifeCoop_BadEndingScript" OPEN
{
	if (GetLevelInfo(LEVELINFO_LEVELNUM) != 29)
	{
		// Kill this script in other maps as it's rather pointless and potentially wasting CPU cycles
		Terminate;
	}

	if (GetLevelInfo(LEVELINFO_LEVELNUM) == 29)
	{
		if (GetCVar("strifecoop_badending"))
		{
			// If all players are killed by the Entity, trigger the bad ending...

			// First, check how many players are actually online
			int i = 0;
			int onlinePlayers = 0;
			for (i = 0; i < MAXPLAYERS; i++)
			{
				if (PlayerInGame(i))
				{
					onlinePlayers++;
				}
			}

			int deadPlayers = 0;
			for (i = 0; i < MAXPLAYERS; i++)
			{
				if (PlayerInGame(i) && map29PlayerIsDead[i])
				{
					deadPlayers++;
				}
			}

			if (deadPlayers == onlinePlayers)
			{
				// The Entity wins... game over!
				ScriptCall("StrifeCoopHandler", "PlayBadEndingSlideshow");
			}
		}
		else
		{
			// Not sure if this is a good idea, but if the bad ending option is disabled,
			// just mark all players as not dead?
			for (i = 0; i < MAXPLAYERS; i++)
			{
				map29PlayerIsDead[i] = FALSE;
			}
		}
	}

	// Repeat this script indefinitely...
	Delay(1);
	Restart;
}
